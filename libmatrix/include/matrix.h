#ifndef MATRIX_H
#define MATRIX_H

#include <stdint.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef enum
{
  MAT_SUCCESS = 0, 			   /**< No error */
  MAT_SIZE_MISMATCH = -3,	   /**< Size of matrices is not compatible with the operation. */
  MAT_SINGULAR = -5,		   /**< Generated by matrix inversion if the input matrix is singular and cannot be inverted. */
} mat_status;

typedef struct{
	uint16_t rows;
	uint16_t cols;
	float *pData;
}mat_instance_f32;

typedef struct{
	uint16_t rows;
	uint16_t cols;
	double *pData;
}mat_instance_f64;

extern void mat_init_f32(mat_instance_f32* S, uint16_t rows, uint16_t cols, float *pData);
extern void mat_init_f64(mat_instance_f64* S, uint16_t rows, uint16_t cols, double *pData);
extern mat_status mat_zeros_f32(mat_instance_f32* pSrc);
extern mat_status mat_zeros_f64(mat_instance_f64* pSrc);
extern mat_status mat_identity_f32(mat_instance_f32* pSrc);
extern mat_status mat_identity_f64(mat_instance_f64* pSrc);
extern mat_status mat_scale_f32(const mat_instance_f32* pSrc, float scale, mat_instance_f32* pDst);
extern mat_status mat_scale_f64(const mat_instance_f64* pSrc, double scale, mat_instance_f64* pDst);
extern mat_status mat_duplicate_f32(const mat_instance_f32* pSrc, mat_instance_f32* pDst);
extern mat_status mat_duplicate_f64(const mat_instance_f64* pSrc, mat_instance_f64* pDst);
extern mat_status mat_add_f32(const mat_instance_f32* pSrcA, const mat_instance_f32* pSrcB, mat_instance_f32* pDst);
extern mat_status mat_add_f64(const mat_instance_f64* pSrcA, const mat_instance_f64* pSrcB, mat_instance_f64* pDst);
extern mat_status mat_sub_f32(const mat_instance_f32* pSrcA, const mat_instance_f32* pSrcB, mat_instance_f32* pDst);
extern mat_status mat_sub_f64(const mat_instance_f64* pSrcA, const mat_instance_f64* pSrcB, mat_instance_f64* pDst);
extern mat_status mat_mult_f32(const mat_instance_f32* pSrcA, const mat_instance_f32* pSrcB, mat_instance_f32* pDst);
extern mat_status mat_mult_f64(const mat_instance_f64* pSrcA, const mat_instance_f64* pSrcB, mat_instance_f64* pDst);
extern mat_status mat_trans_f32(const mat_instance_f32* pSrc, mat_instance_f32* pDst);
extern mat_status mat_trans_f64(const mat_instance_f64* pSrc, mat_instance_f64* pDst);
extern mat_status mat_inverse_f32(const mat_instance_f32* pSrc, mat_instance_f32* pDst); //pSrcA will be changed to identity matrix
extern mat_status mat_inverse_f64(const mat_instance_f64* pSrc, mat_instance_f64* pDst); //pSrcA will be changed to identity matrix

#ifdef __cplusplus
}
#endif

#endif
